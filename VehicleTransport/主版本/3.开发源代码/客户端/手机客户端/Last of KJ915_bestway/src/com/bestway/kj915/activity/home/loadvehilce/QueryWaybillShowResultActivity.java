package com.bestway.kj915.activity.home.loadvehilce;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import android.app.AlertDialog;import android.app.AlertDialog.Builder;import android.content.DialogInterface;import android.content.DialogInterface.OnClickListener;import android.content.Intent;import android.graphics.Color;import android.media.MediaPlayer;import android.os.Bundle;import android.os.SystemClock;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.TextView;import android.widget.Toast;import com.bestway.kj915.GlobleFields;import com.bestway.kj915.R;import com.bestway.kj915.activity.BasicTitleActivity;import com.bestway.kj915.afinalnet.CommonXmlParser;import com.bestway.kj915.afinalnet.FinalNClient;import com.bestway.kj915.afinalnet.NetCallback;import com.bestway.kj915.custom.refreshlistview.interf.OnRefreshListener;import com.bestway.kj915.custom.refreshlistview.view.RefreshListView;import com.bestway.kj915.dao.CommonDbUtiles;import com.bestway.kj915.domain.m_Plan;import com.bestway.kj915.domain.reflect.m_Department;import com.bestway.kj915.domain.reflect.m_MaterielType;import com.bestway.kj915.domain.reflect.m_Person;import com.bestway.kj915.domain.req.ReqPlanDetail;import com.bestway.kj915.domain.req.load.LoadContainer;import com.bestway.kj915.domain.req.load.ReqLoad;import com.bestway.kj915.domain.req.load.m_Plan_Load;import com.bestway.kj915.domain.res.plan.Listm_Plan_CheckVehicle;import com.bestway.kj915.domain.res.plan.OutGetPlanDetailModel;import com.bestway.kj915.domain.res.plan.m_Apply;import com.bestway.kj915.domain.res.plan.m_Plan_ApplyMaterie;import com.bestway.kj915.domain.res.plan.m_Plan_ApplyVehicle;import com.bestway.kj915.domain.res.plan.m_Plan_CheckVehicle;import com.bestway.kj915.enumation.EnumFlowTypePath;import com.bestway.kj915.utils.LogUtils;import com.bestway.kj915.utils.TimerUtils;/** * 显示所有按照条件查询的运单号列表 *  * @author gaga *  */public class QueryWaybillShowResultActivity extends BasicTitleActivity {	/**	 * 每次加载指定的数据量	 */	private int perPageSize = 2;	/**	 * 数据集合	 */	private List<m_Plan> dataList_Plan;	private List<m_Apply> dataList_Apply;	HashMap<Integer, m_Apply> map_Apply;	private List<m_Plan_CheckVehicle> dataList_CheckVehicle;	private HashMap<Integer, m_Plan_CheckVehicle> map_CheckVehicle;	/**	 * 当前已有的数据量	 */	private int loadNumber = 0;// 已加载的运单量	/**	 * 查询条件封装的消息	 */	@Override	public void doVarious() {		title_text_view.setVisibility(View.VISIBLE);		title_text_view.setText("选择装车运单");	}	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_load_vehicles_query_waybill_result);		final RefreshListView mListView = (RefreshListView) findViewById(R.id.refreshlistview);		dataList_Plan = new ArrayList<m_Plan>();		dataList_Apply = new ArrayList<m_Apply>();		final MyAdapter mAdapter = new MyAdapter();		FinalNClient client = FinalNClient.getInstance();		client.sendMessage(new ReqPlanDetail(EnumFlowTypePath.Load.name(), 0,				perPageSize, GlobleFields.UserID), new NetCallback() {			@Override			public String getCmdType() {				return NetCallback.Data_GetPlanDetail;			}			@Override			public void doPrevious() {			}			@Override			public void onResult(String result) {			}			@Override			public void onResult(String inner, boolean Result) {				System.out.println(inner.substring(1800));				OutGetPlanDetailModel model = (OutGetPlanDetailModel) CommonXmlParser						.parserXml(inner, new OutGetPlanDetailModel());				dataList_Plan = model.Listm_Plan.list;				dataList_Apply = model.Listm_Apply.list1;				dataList_CheckVehicle = model.Listm_Plan_CheckVehicle.list4;				if (dataList_Plan == null) {					Toast.makeText(QueryWaybillShowResultActivity.this,							"查询到0条记录，请修改查询条件查询", 0).show();					return;				}				/**				 * 把运单与对应的申请一一对应				 */				map_Apply = new HashMap<Integer, m_Apply>();				for (m_Apply apply : dataList_Apply) {					map_Apply.put(apply.ID, apply);				}								// 把运单的id和审核的车辆一一一对应				map_CheckVehicle = new HashMap<Integer, m_Plan_CheckVehicle>();				for (m_Plan_CheckVehicle checkVehicle : dataList_CheckVehicle) {					map_CheckVehicle.put(checkVehicle.PlanID, checkVehicle);				}				loadNumber = dataList_Plan.size();				mListView.setAdapter(mAdapter);				mAdapter.notifyDataSetChanged();			}			@Override			public void onResult(String entireXml, String inner, boolean Result) {			}		});		mListView.setOnRefreshListener(new OnRefreshListener() {			@Override			public void onLoadingMore() {				MediaPlayer mp = MediaPlayer.create(						QueryWaybillShowResultActivity.this, R.raw.xiala);				try {					mp.prepare();				} catch (Exception e) {					e.printStackTrace();				}				mp.start();				FinalNClient client = FinalNClient.getInstance();				client.sendMessage(						new ReqPlanDetail(EnumFlowTypePath.Load.name(),								loadNumber, perPageSize, GlobleFields.UserID),						new NetCallback() {							@Override							public String getCmdType() {								return NetCallback.Data_GetPlanDetail;							}							@Override							public void doPrevious() {							}							@Override							public void onResult(String result) {							}							@Override							public void onResult(String inner, boolean Result) {								SystemClock.sleep(500);								System.out.println("Result" + Result);								System.out.println(inner);								OutGetPlanDetailModel model = (OutGetPlanDetailModel) CommonXmlParser										.parserXml(inner,												new OutGetPlanDetailModel());								if (model.Listm_Plan.list == null) {									mListView.hideFooterView();									Toast.makeText(											QueryWaybillShowResultActivity.this,											"所有数据已加载完毕", 0).show();									return;								}								dataList_Plan.addAll(model.Listm_Plan.list);								dataList_Apply.addAll(model.Listm_Apply.list1);								dataList_CheckVehicle.addAll(model.Listm_Plan_CheckVehicle.list4);								/**								 * 把申请的id和申请一一对应								 */								map_Apply = new HashMap<Integer, m_Apply>();								for (m_Apply apply : dataList_Apply) {									map_Apply.put(apply.ID, apply);								}								for (m_Plan_CheckVehicle checkVehicle : dataList_CheckVehicle) {									map_CheckVehicle.put(checkVehicle.PlanID,											checkVehicle);								}								loadNumber = dataList_Plan.size();								mAdapter.notifyDataSetChanged();								mListView.hideFooterView();							}							@Override							public void onResult(String entireXml,									String inner, boolean Result) {							}						});			}			@Override			public void onDownPullRefresh() {				SystemClock.sleep(500);				Toast.makeText(QueryWaybillShowResultActivity.this, "已经是最新数据",						0).show();				mAdapter.notifyDataSetChanged();				mListView.hideHeaderView();			}		});		/**		 * 设置mListView子条目的点击事件		 */		mListView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view,					int position, long id) {				// 这个地方是为了解决listView下拉的时候出现的问题，避免下拉过程点击了				if (mListView.headerViewCurrentState == 0						&& mListView.diff == 0) {					mListView.diff = 0;					/**					 * 因为有头布局所以要减去1					 */					m_Plan plan = dataList_Plan.get(position - 1);					final String waybill_id = plan.vc_PlanCode;					// 将当前处理的运单详情储存起来					GlobleFields.CurrentPlan = plan;					Builder builder = new AlertDialog.Builder(							QueryWaybillShowResultActivity.this);					builder.setTitle("运单信息详情");					builder.setMessage("运单号    ：" + plan.vc_PlanCode + "\n"							+ "声请人    ：" + plan.ApplyID);					builder.setNegativeButton("确定", new OnClickListener() {						public void onClick(DialogInterface dialog, int which) {							dialog.dismiss();							// 初始化消息发送请求							ReqLoad load = new ReqLoad();							LoadContainer container = new LoadContainer();							List<m_Plan_Load> list = new ArrayList<m_Plan_Load>();							container.list = list;							load.ListM_Plan_Load = container;							// *************							load.AddressID = 0;							load.DepartmentID = 0;							load.DateTime = TimerUtils.getTime();							// *************							load.UserID = GlobleFields.UserID;							load.PlanID = GlobleFields.CurrentPlan.ID;							// load.PlanID = 111;							GlobleFields.reqLoad = load;							Intent data = new Intent(									"com.bestway.kj915.activity.home.loadvehilce.LoadNFCActivity");							startActivity(data);							finish();						}					});					builder.setPositiveButton("取消", new OnClickListener() {						@Override						public void onClick(DialogInterface dialog, int which) {							dialog.dismiss();							dialog.dismiss();							;						}					});					builder.show();				}			}		});	}	class MyAdapter extends BaseAdapter {		@Override		public int getCount() {			return dataList_Plan.size();		}		// ;;;;		@Override		public View getView(int position, View arg1, ViewGroup arg2) {			View view;			m_Plan plan = dataList_Plan.get(position);			m_Plan_CheckVehicle checkedVehicle = map_CheckVehicle.get(Integer					.valueOf(plan.ID));			if (arg1 != null) {				view = arg1;			} else {				view = View.inflate(QueryWaybillShowResultActivity.this,						R.layout.item_waybill1, null);			}			TextView waybill_value = (TextView) view					.findViewById(R.id.waybill_value);			waybill_value.setText(plan.vc_PlanCode);			waybill_value.setTextSize(18);			waybill_value.setTextColor(Color.BLACK);			TextView arrive_time_value = (TextView) view					.findViewById(R.id.arrive_time_value);			arrive_time_value.setText(plan.dt_ArriveDestinationDateTime);			/**			 * 初始化部门			 */			TextView apply_department_value = (TextView) view					.findViewById(R.id.apply_department_value);			System.out.println(plan.ApplyID + ".."					+ map_Apply.get(plan.ApplyID));			List<m_Department> departments = CommonDbUtiles					.querryByConditions(							QueryWaybillShowResultActivity.this,							m_Department.class,							"ID=?",							new String[] { map_Apply.get(plan.ApplyID).ApplyDepartmentID									+ "" }, null);			System.out.println(map_Apply.get(plan.ApplyID).ApplyDepartmentID					+ "..." + map_Apply.get(plan.ApplyID).vc_PlanUse);			System.out.println("departments.size()" + departments.size());			apply_department_value.setText(departments.get(0).vc_Name);			/**			 * 初始化人			 */			TextView apply_user_value = (TextView) view					.findViewById(R.id.apply_user_value);			List<m_Person> persons = CommonDbUtiles.querryByConditions(					QueryWaybillShowResultActivity.this, m_Person.class,					"ID=?",					new String[] { map_Apply.get(plan.ApplyID).ApplyPersonID							+ "" }, null);			apply_user_value.setText(persons.get(0).getVc_Name());			// 初始化物料类型			TextView meterialType = (TextView) view					.findViewById(R.id.meterial_value);			System.out					.println("checkedVehicle.MaterieTypeIDcheckedVehicle.MaterieTypeIDcheckedVehicle.MaterieTypeIDcheckedVehicle.MaterieTypeID"							+ checkedVehicle.MaterieTypeID);						List<m_MaterielType> m_MaterielTypes = CommonDbUtiles					.querryByConditions(QueryWaybillShowResultActivity.this,							m_MaterielType.class, "ID=?",							new String[] { checkedVehicle.MaterieTypeID + "" },							null);			if(m_MaterielTypes.size()>0)			meterialType.setText(m_MaterielTypes.get(0).vc_Name);			// 初始化物料的数量			TextView number_value = (TextView) view					.findViewById(R.id.number_value);			number_value.setText(checkedVehicle.n_Count + "");			return view;		}		@Override		public Object getItem(int arg0) {			return null;		}		@Override		public long getItemId(int arg0) {			return 0;		}	}}